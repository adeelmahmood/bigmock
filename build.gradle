buildscript {
	ext { springBootVersion = '1.2.4.RELEASE' }
	repositories { mavenCentral() }
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
	}
}

allprojects {  group = 'com.hadoop.bigmock' }

ext {
	yarnprojects = subprojects.findAll { project -> (project.name == 'bigmock-yarn') }
	bootprojects =  subprojects - yarnprojects
}

subprojects() {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'http://maven.springframework.org/milestone/' }
		maven { url 'http://repo.spring.io/libs-milestone' }
		maven { url 'http://repo.spring.io/snapshot' }
	}

	configurations.all {
		// replaced with jcl-over-slf4j
		all*.exclude group: 'commons-logging', module: 'commons-logging'
		// replaced with log4j-over-slf4j
		all*.exclude group: 'log4j', module: 'log4j'
		all*.exclude module: 'log4j-over-slf4j'
	}

	dependencies {  }

	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}


	eclipse {
		classpath {
			containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
			containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
		}
	}
}

configure(bootprojects) {

	apply plugin: 'spring-boot'
	apply plugin: 'io.spring.dependency-management'

	bootRepackage {  enabled = false  }

	dependencies { testCompile("org.springframework.boot:spring-boot-starter-test")  }
}

task wrapper(type: Wrapper) { gradleVersion = '2.3' }
